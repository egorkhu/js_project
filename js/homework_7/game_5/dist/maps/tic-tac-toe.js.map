{"version":3,"sources":["Board.js","Game.js","Main.js","Players.js"],"names":[],"mappingshIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../tic-tac-toe.js","sourcesContent":["class Board {\n    generateField() {\n        let row = '';\n        let id = 1;\n        for (let i = 1; i <= 3; i++) {\n            let col = '';\n            for (let j = 1; j <= 3; j++) {\n                col += `<td class=\"b-line__cell\" id=\"cell-${id}\">`;\n                id++;\n            }\n            row += `<tr>${col}</tr>`;\n        }\n        return `<table class=\"b-line__table\"><tbody>${row}</tbody></table>`;\n    }\n\n    colorCell(cells) {\n        for (let cell of cells) {\n            document.querySelector(`#cell-${cell}`).style.color = 'red';\n        }\n    }\n\n    checkBusyCell(event) {\n        return event.currentTarget.childElementCount > 0\n    }\n\n    clear() {\n        document.querySelector('.b-line__table').remove();\n    }\n}\n","class Game {\n    constructor() {\n        this.step = 0;\n        this.winningLines = [\n            ['1', '2', '3'],\n            ['4', '5', '6'],\n            ['7', '8', '9'],\n            ['1', '4', '7'],\n            ['2', '5', '8'],\n            ['3', '6', '9'],\n            ['1', '5', '9'],\n            ['3', '5', '7']\n        ];\n        this.move = this.makeMove.bind(this);\n    }\n\n    init(board, players) {\n        this.board = board;\n        this.players = players;\n    }\n\n    run() {\n        this.createInfoMessage();\n        let text = \"Первыми ходят крестики, поставьте его в любом месте на поле.\";\n        this.showInfoMessage(text);\n        let field = this.board.generateField();\n        document.querySelector('.b_line__info-message').insertAdjacentHTML('afterend', field);\n        document.querySelectorAll('.b-line__cell').forEach((element) => {\n            element.addEventListener('click', this.move);\n        });\n    }\n\n    makeMove(event) {\n        let id = null;\n        if (this.board.checkBusyCell(event)) {\n            return;\n        }\n        if (this.players.ticPlayerMove === true) {\n            event.target.insertAdjacentHTML('afterbegin', `<i class=\"fal fa-times\"></i>`);\n            id = event.target.id;\n            this.players.ticMoveLine += id.slice(-1);\n            this.players.ticPlayerMove = false;\n            this.players.tacPlayerMove = true;\n            this.step++;\n        } else if (this.players.tacPlayerMove === true) {\n            event.target.insertAdjacentHTML('afterbegin', `<i class=\"far fa-circle\"></i>`);\n            id = event.target.id;\n            this.players.tacMoveLine += id.slice(-1);\n            this.players.ticPlayerMove = true;\n            this.players.tacPlayerMove = false;\n            this.step++;\n        }\n        if (this.checkStep() === true) {\n            let result = this.checkTheLine(this.players.ticMoveLine, this.players.tacMoveLine);\n            if (result !== null) {\n                this.showInfoMessage(result);\n                this.createAgainBtn();\n                document.querySelectorAll('.b-line__cell').forEach((element) => {\n                    element.removeEventListener('click', this.move);\n                });\n            }\n        }\n    }\n\n    checkStep() {\n        return this.step > 4;\n    }\n\n    checkTheLine(ticLine, tacLine) {\n        outer:\n            for (let line of this.winningLines) {\n                for (let i = 0; i < line.length; i++) {\n                    if (ticLine.indexOf(line[i]) === -1) {\n                        continue outer;\n                    }\n                }\n                this.board.colorCell(line);\n                return 'Победили крестики!';\n            }\n        outer:\n            for (let line of this.winningLines) {\n                for (let i = 0; i < line.length; i++) {\n                    if (tacLine.indexOf(line[i]) === -1) {\n                        continue outer;\n                    }\n                }\n                this.board.colorCell(line);\n                return 'Победили нолики!';\n            }\n        if (this.step === 9) {\n            return 'Ничья';\n        }\n        return null;\n    }\n\n    createInfoMessage() {\n        this.infoMessage = document.createElement('div');\n        this.infoMessage.classList.add('b_line__info-message');\n        document.querySelector('.b-form__legend').after(this.infoMessage);\n    }\n\n    showInfoMessage(text) {\n        this.infoMessage.innerText = text;\n    }\n\n    deleteInfoMessage() {\n        document.querySelector('.b_line__info-message').remove();\n    }\n\n    createAgainBtn() {\n        document.querySelector('.b-line__table').insertAdjacentHTML('afterend', `<button class=\"b-line__button\">Сыграем еще раз?</button>`);\n        document.querySelectorAll('.b-line__button')[0].addEventListener('click', () => {\n            this.fullReset();\n            this.run();\n        });\n    }\n\n    removeAgainBtn() {\n        document.querySelectorAll('.b-line__button')[0].remove();\n    }\n\n    fullReset() {\n        this.step = 0;\n        this.players = new Players();\n        this.board.clear();\n        this.deleteInfoMessage();\n        this.removeAgainBtn();\n    }\n}","window.addEventListener('load', () => {\n    const board = new Board();\n    const players = new Players();\n    const game = new Game();\n\n    game.init(board, players);\n    game.run();\n});","class Players {\n    constructor() {\n        this.ticPlayerMove = true;\n        this.tacPlayerMove = false;\n        this.ticMoveLine = '';\n        this.tacMoveLine = '';\n    }\n}"]}