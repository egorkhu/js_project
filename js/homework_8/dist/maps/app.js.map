{"version":3,"sources":["Board.js","Data.js","Game.js","Main.js","Mines.js","Settings.js","Siblings.js","Sprite.js","Timer.js"],"names":[],"mappingsvxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["class Board {\n    constructor() {\n        this.boardEl = document.querySelector('.minesweeper__board');\n        this.openCell = this.openCell.bind(this);\n        this.popCell = this.popCell.bind(this);\n        this.smilePush = this.smilePush.bind(this);\n        this.smilePop = this.smilePop.bind(this);\n    }\n\n    init(settings, mines, game, data, sprite) {\n        this.settings = settings;\n        this.mines = mines;\n        this.game = game;\n        this.data = data;\n        this.sprite = sprite;\n    }\n\n    renderBoard() {\n        for (let i = 1; i <= this.settings.rows + 4; i++) {\n            let tr = document.createElement('tr');\n\n            for (let j = 1; j <= this.settings.cols + 2; j++) {\n                let td = document.createElement('td');\n\n                if (i === 1) {\n                    td.classList.add('minesweeper-border-top');\n                    tr.appendChild(td);\n                    continue;\n                }\n\n                if (i === 2 && j > 1 && j < this.settings.cols) {\n                    td.classList.add('minesweeper-info');\n                    td.setAttribute('colspan', `${this.settings.cols}`);\n                    j = this.settings.cols + 1;\n                    td.insertAdjacentHTML('beforeend', `\n                        <div class=\"minesweeper-info-content\">\n                            <div class=\"minesweeper-mine-count\">\n                                <span class=\"minesweeper-mine-count-hundreds\"></span>\n                                <span class=\"minesweeper-mine-count-tens\"></span>\n                                <span class=\"minesweeper-mine-count-units\"></span>\n                            </div>\n                            <span class=\"minesweeper-smile-face\"></span>\n                            <div class=\"minesweeper-timer\">\n                                <span class=\"minesweeper-timer-hundreds\"></span>\n                                <span class=\"minesweeper-timer-tens\"></span>\n                                <span class=\"minesweeper-timer-units\"></span>\n                            </div>\n                        </div>\n                    `);\n                    tr.appendChild(td);\n                    continue;\n                }\n\n                if (i === 2) {\n                    td.classList.add('minesweeper-info');\n                    tr.appendChild(td);\n                    continue;\n                }\n\n                if (i === 3) {\n                    td.classList.add('minesweeper-border-middle');\n                    tr.appendChild(td);\n                    continue;\n                }\n\n                if (j === 1) {\n                    td.classList.add('minesweeper-border-left');\n                    tr.appendChild(td);\n                    continue;\n                }\n\n                if (j === this.settings.cols + 2) {\n                    td.classList.add('minesweeper-border-right');\n                    tr.appendChild(td);\n                    continue;\n                }\n\n                if (i === this.settings.rows + 4) {\n                    td.classList.add('minesweeper-border-bottom');\n                    tr.appendChild(td);\n                    continue;\n                }\n\n                td.classList.add(`y-${i - 3}`);\n                td.classList.add(`x-${j - 1}`);\n                td.classList.add('minesweeper-cell');\n                tr.appendChild(td);\n            }\n            this.boardEl.appendChild(tr);\n        }\n    }\n\n    checkCell(cell) {\n        if (cell.classList.contains('flag')) {\n            return;\n        }\n\n        if (!cell.classList.contains('minesweeper-cell')) {\n            return;\n        }\n\n        if (this.data.minesArr.indexOf(cell) !== -1) {\n            cell.classList.add('mine-exploded');\n            this.game.lose(cell);\n            return;\n        }\n\n        let i = 0;\n        for (let tip of this.data.numberTips) {\n            if (tip === cell) {\n                i++;\n            }\n        }\n\n        if (i > 0) {\n            cell.classList.add(`value-${i}`);\n            cell.classList.add('open');\n            if (this.isCellsAreOpen()) {\n                this.game.win();\n            }\n            return;\n        }\n\n        cell.classList.add('open');\n        cell.removeEventListener('click', this.openCell);\n\n        let cellCoords = {\n            y: Number(cell.classList[0].slice(2)),\n            x: Number(cell.classList[1].slice(2))\n        };\n\n        let cellSiblings = new Siblings(cellCoords);\n\n        for (let cell of cellSiblings.arr) {\n            if (cell !== null && !cell.classList.contains('open') && !cell.classList.contains('flag')) {\n                cell.classList.add('open');\n                this.checkCell(cell);\n                this.openCell(cell);\n            }\n        }\n    }\n\n    openCell(cell) {\n        this.checkCell(cell);\n    }\n\n    popCell(cell) {\n        document.querySelector('.minesweeper-smile-face').classList.add('smile-surprised');\n        this.popupCell(cell);\n        document.querySelectorAll('.minesweeper-cell').forEach(element => {\n            element.addEventListener('mouseenter', this.popupCell);\n            element.addEventListener('mouseleave', this.popdownCell);\n        });\n    }\n\n    popupCell(element) {\n        event.target.classList.add('pop');\n    }\n\n    popdownCell() {\n        event.target.classList.remove('pop');\n    }\n\n    popCellRemove(cell) {\n        document.querySelector('.minesweeper-smile-face').classList.remove('smile-surprised');\n        this.popdownCell(cell);\n        this.openCell(cell);\n        document.querySelectorAll('.minesweeper-cell').forEach(element => {\n            element.removeEventListener('mouseenter', this.popupCell);\n            element.removeEventListener('mouseleave', this.popdownCell);\n        });\n    }\n\n    smilePush() {\n        this.smilePopDown();\n        document.querySelector('.minesweeper-smile-face').addEventListener('mouseenter', this.smilePopDown);\n        document.querySelector('.minesweeper-smile-face').addEventListener('mouseleave', this.smilePopUp);\n    }\n\n    smilePop() {\n        this.smilePopUp();\n        document.querySelector('.minesweeper-smile-face').removeEventListener('mouseenter', this.smilePopDown);\n        document.querySelector('.minesweeper-smile-face').removeEventListener('mouseleave', this.smilePopUp);\n    }\n\n    smilePopDown() {\n        document.querySelector('.minesweeper-smile-face').classList.add('smile-pushed');\n    }\n\n    smilePopUp() {\n        document.querySelector('.minesweeper-smile-face').classList.remove('smile-pushed');\n    }\n\n    placeFlag(event) {\n        if (this.data.flagsArr.indexOf(event.target) === -1) {\n            if (this.settings.mineCount < 1) {\n                return;\n            }\n            this.data.flagsArr.push(event.target);\n        }\n\n        if (event.target.classList.contains('flag')) {\n            this.mines.increaseCount();\n            event.target.classList.remove('flag');\n            this.data.flagsArr.splice(this.data.flagsArr.indexOf(event.target), 1);\n        } else {\n            this.mines.decreaseCount();\n            event.target.classList.add('flag');\n        }\n\n        if (this.isCellsAreOpen()) {\n            this.game.win();\n        }\n    }\n\n    isCellsAreOpen() {\n        let cells = document.querySelectorAll('.minesweeper-cell');\n        for (let cell of cells) {\n            if (!cell.classList.contains('open') && !cell.classList.contains('flag')) {\n                return;\n            }\n        }\n        return true;\n    }\n\n    showWrongFlags() {\n        for (let flag of this.data.flagsArr) {\n            if (this.data.minesArr.indexOf(flag) < 0) {\n                this.data.wrongFlags.push(flag);\n            }\n        }\n        this.data.wrongFlags.forEach((flag) => {\n            flag.classList.add('wrong-flag');\n        });\n    }\n\n    getCellEl(x, y) {\n        return document.querySelector(`.y-${y}.x-${x}`);\n    }\n\n    clear() {\n        while (this.boardEl.firstChild) {\n            this.boardEl.removeChild(this.boardEl.firstChild);\n        }\n    }\n}\n\n","class Data {\n    constructor() {\n        this.firstClick = null;\n        this.minesArr = [];\n        this.numberTips = [];\n        this.flagsArr = [];\n        this.wrongFlags = [];\n    }\n}","class Game {\n    init(settings, board, mines, timer, params, data, sprite) {\n        this.settings = settings;\n        this.board = board;\n        this.mines = mines;\n        this.timer = timer;\n        this.params = params;\n        this.data = data;\n        this.sprite = sprite;\n    }\n\n    run() {\n        this.mines.markupCount();\n        this.mines.setCount();\n        this.timer.markup();\n        this.timer.set();\n\n        this.setHandlers();\n    }\n\n    win() {\n        if (this.data.flagsArr.length === 0) {\n            return;\n        }\n        if (this.data.flagsArr.length !== this.data.minesArr.length) {\n            return;\n        }\n        for (let flag of this.data.flagsArr) {\n            if (this.data.minesArr.indexOf(flag) < 0) {\n                return false;\n            }\n        }\n        document.querySelector('.minesweeper-smile-face').classList.add('smile-win');\n        clearInterval(this.timer.intervalID);\n        this.clearHandlers();\n    }\n\n    lose(cell) {\n        clearInterval(this.timer.intervalID);\n        this.mines.showMines(cell);\n        this.board.showWrongFlags()\n        document.querySelector('.minesweeper-smile-face').classList.add('smile-dead');\n        this.clearHandlers();\n    }\n\n    setHandlers() {\n        document.onmousedown = () => {\n            let cell = event.target;\n\n            if (event.which === 1 && cell.classList.contains('minesweeper-cell')) {\n                this.board.popCell(cell);\n            }\n        };\n\n        document.onmouseup = () => {\n            if (event.which === 1 && event.target.classList.contains('minesweeper-cell')) {\n                if (this.data.firstClick === null) {\n                    let firstClickCoords = {\n                        y: Number(event.target.classList[0].slice(2)),\n                        x: Number(event.target.classList[1].slice(2))\n                    };\n                    this.data.firstClick = new Siblings(firstClickCoords);\n                    this.mines.generateMines();\n                    this.mines.generateNumberTips();\n                    this.timer.starter();\n                }\n                let cell = event.target;\n                this.board.popCellRemove(cell);\n            }\n        };\n\n        document.oncontextmenu = (event) => {\n\n            if (event.target.classList.contains('open')) {\n                event.preventDefault();\n                return;\n            }\n            if (event.target.classList.contains('minesweeper-cell')) {\n                this.board.placeFlag(event);\n                event.preventDefault();\n            }\n        };\n\n        let smile = document.querySelector('.minesweeper-smile-face');\n\n        smile.addEventListener('mousedown', this.board.smilePush);\n        smile.addEventListener('mouseup', () => {\n            this.reset();\n            this.board.renderBoard();\n            this.run();\n        });\n        document.addEventListener('mouseup', () => {\n            if (event.target !== smile) {\n                this.board.smilePop();\n            }\n        });\n    }\n\n    clearHandlers() {\n        document.oncontextmenu = (event) => {\n            event.preventDefault();\n        };\n        document.onmousedown = (event) => {\n            event.preventDefault();\n        };\n        document.onmouseup = (event) => {\n            event.preventDefault();\n        };\n    }\n\n    reset() {\n        this.data = new Data();\n        this.board.clear();\n        this.timer.clear();\n        this.timer = new Timer();\n        this.timer.init(this.sprite);\n        this.settings.init(this.params);\n        this.mines.init(this.settings, this.sprite, this.board, this.data);\n        this.board.init(this.settings, this.mines, this, this.data, this.sprite);\n    }\n}","window.addEventListener('load', function() {\n    const settings = new Settings();\n    const board = new Board();\n    const sprite = new Sprite();\n    const mines = new Mines();\n    const timer = new Timer();\n    let data = new Data();\n    const game = new Game();\n\n    let params = {rows: 20, cols: 20, mineCount: 29};\n\n    settings.init(params);\n    board.init(settings, mines, game, data, sprite);\n    mines.init(settings, sprite, board, data);\n    timer.init(sprite);\n    game.init(settings, board, mines, timer, params, data, sprite);\n\n    board.renderBoard();\n    game.run();\n});","class Mines {\n    init(settings, sprite, board, data) {\n        this.settings = settings;\n        this.sprite = sprite;\n        this.board = board;\n        this.data = data;\n        this.mineCount = this.settings.mineCount;\n    }\n\n    markupCount() {\n        this.units = document.querySelector('.minesweeper-mine-count-units');\n        this.tens = document.querySelector('.minesweeper-mine-count-tens');\n        this.hundreds = document.querySelector('.minesweeper-mine-count-hundreds');\n    }\n\n    setCount() {\n        let splittedCount = this.splitCount();\n\n        this.units.style.backgroundPosition = `${this.sprite.numberValues[splittedCount[2]]} 0`;\n        this.tens.style.backgroundPosition = `${this.sprite.numberValues[splittedCount[1]]} 0`;\n        this.hundreds.style.backgroundPosition = `${this.sprite.numberValues[splittedCount[0]]} 0`;\n    }\n\n    splitCount() {\n        return [\n            Math.floor(this.settings.mineCount / 100),\n            (Math.floor(this.settings.mineCount / 10)) % 10,\n            this.settings.mineCount % 10\n        ];\n    }\n\n    decreaseCount() {\n        this.settings.mineCount--;\n        this.setCount();\n    }\n\n    increaseCount() {\n        this.settings.mineCount++;\n        this.setCount();\n    }\n\n    generateMines() {\n        for (let i = 0; i < this.mineCount; i++) {\n            let cell = this.generateRandomCoordinates();\n            if (this.data.minesArr.indexOf(cell) !== -1) {\n                i--;\n                continue;\n            }\n            this.data.minesArr.push(cell);\n        }\n    }\n\n    showMines(cell) {\n        for (let element of this.data.minesArr) {\n            if (element === cell) {\n                continue;\n            }\n            element.classList.add('mine');\n        }\n    }\n    generateRandomCoordinates() {\n        outer:\n        while (true) {\n            let x = Math.floor(Math.random() * this.settings.cols) + 1;\n            let y = Math.floor(Math.random() * this.settings.rows) + 1;\n            let cell = this.board.getCellEl(x, y);\n\n            for (let element of this.data.firstClick.arr) {\n                if (cell === element || cell === event.target) {\n                    continue outer;\n                }\n            }\n            return cell;\n        }\n    }\n\n    generateNumberTips() {\n        for (let mine of this.data.minesArr) {\n            let mineCoords = {\n                y: Number(mine.classList[0].slice(2)),\n                x: Number(mine.classList[1].slice(2))\n            };\n\n            const cellSiblings = new Siblings(mineCoords);\n\n            for (let element of cellSiblings.arr) {\n                if (element !== null && this.data.minesArr.indexOf(element) === -1) {\n                    this.data.numberTips.push(element);\n                }\n            }\n        }\n    }\n}","class Settings {\n\n    init(params) {\n        let defaultParams = {rows: 10, cols: 10, mineCount: 10};\n        Object.assign(defaultParams, params);\n\n        if (defaultParams.rows < 4 || defaultParams.rows >= 30) {\n            throw new Error('Введено недопустимое количество строк');\n        }\n\n        if (defaultParams.cols < 7 || defaultParams.cols >= 30) {\n            throw new Error('Введено недопустимое количество столбцов');\n        }\n\n        if (defaultParams.mineCount < 1 || defaultParams.mineCount >= 30) {\n            throw new Error('Введено недопустимое количество мин');\n        }\n\n        this.rows = defaultParams.rows;\n        this.cols = defaultParams.cols;\n        this.mineCount = defaultParams.mineCount;\n    }\n\n}","class Siblings {\n    constructor(mineCoords) {\n        this.arr = [document.querySelector(`.y-${mineCoords.y + 1}.x-${mineCoords.x}`),\n                    document.querySelector(`.y-${mineCoords.y + 1}.x-${mineCoords.x - 1}`),\n                    document.querySelector(`.y-${mineCoords.y + 1}.x-${mineCoords.x + 1}`),\n                    document.querySelector(`.y-${mineCoords.y - 1}.x-${mineCoords.x}`),\n                    document.querySelector(`.y-${mineCoords.y - 1}.x-${mineCoords.x - 1}`),\n                    document.querySelector(`.y-${mineCoords.y - 1}.x-${mineCoords.x + 1}`),\n                    document.querySelector(`.y-${mineCoords.y}.x-${mineCoords.x - 1}`),\n                    document.querySelector(`.y-${mineCoords.y}.x-${mineCoords.x + 1}`)\n        ];\n    }\n}","class Sprite {\n    constructor() {\n        this.numberValues = {\n            0: '0px',\n            1: '-19px',\n            2: '-38px',\n            3: '-58px',\n            4: '-77px',\n            5: '-97px',\n            6: '-116px',\n            7: '-136px',\n            8: '-155px',\n            9: '-175px'\n        };\n    }\n}","class Timer {\n    constructor() {\n        this.timerUnits = 0;\n        this.timerTens = 0;\n        this.timerHundreds = 0;\n        this.status = false;\n        this.intervalID = null;\n        this.starter = this.start.bind(this);\n        this.checker = this.check.bind(this);\n    }\n\n    init(sprite) {\n        this.sprite = sprite;\n    }\n\n     start() {\n        this.status = true;\n        this.intervalID = setInterval(() => {\n            if (this.timerUnits !== 9) {\n                this.timerUnits++;\n                this.set();\n                return;\n            }\n            if (this.timerUnits === 9 && this.timerTens !== 9) {\n                this.timerUnits = 0;\n                this.timerTens++;\n                this.set();\n                return;\n            }\n            if (this.timerUnits === 9 && this.timerTens === 9 && this.timerHundreds !== 9) {\n                this.timerUnits = 0;\n                this.timerTens = 0;\n                this.timerHundreds++;\n                this.set();\n                return;\n            }\n            if (this.timerUnits === 9 && this.timerTens === 9 && this.timerHundreds === 9) {\n                clearInterval(this.intervalID);\n            }\n        }, 1000);\n    }\n\n    markup() {\n        this.units = document.querySelector('.minesweeper-timer-units');\n        this.tens = document.querySelector('.minesweeper-timer-tens');\n        this.hundreds = document.querySelector('.minesweeper-timer-hundreds');\n    }\n\n    set() {\n        this.units.style.backgroundPosition = `${this.sprite.numberValues[this.timerUnits]} 0`;\n        this.tens.style.backgroundPosition = `${this.sprite.numberValues[this.timerTens]} 0`;\n        this.hundreds.style.backgroundPosition = `${this.sprite.numberValues[this.timerHundreds]} 0`;\n    }\n\n    check() {\n        if (this.status) {\n            document.querySelectorAll('.minesweeper-cell').forEach(cell => {\n                cell.removeEventListener('mouseup', this.starter);\n            });\n            document.removeEventListener('mouseup', this.checker);\n        }\n    }\n\n    clear() {\n        clearInterval(this.intervalID);\n    }\n}"]}